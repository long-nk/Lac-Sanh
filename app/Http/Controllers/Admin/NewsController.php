<?phpnamespace App\Http\Controllers\Admin;use App\Models\Contents;use App\Models\FileItems;use Illuminate\Http\Request;use App\Http\Controllers\Controller;use Illuminate\Support\Str;use Illuminate\Support\Facades\File;use Intervention\Image\Facades\Image;class NewsController extends Controller{    /**     * Display a listing of the resource.     *     * @return \Illuminate\Http\Response     */    public function index()    {        $contents = Contents::with('fileItem')->orderBy('type', 'asc')->orderBy('sort')->orderBy('created_at', 'desc')->get();        return view('backend.news.index', compact('contents'));    }    /**     * Show the form for creating a new resource.     *     * @return \Illuminate\Http\Response     */    public function create()    {        return view('backend.news.create');    }    /**     * Store a newly created resource in storage.     *     * @param  \Illuminate\Http\Request $request     * @return \Illuminate\Http\Response     */    public function store(Request $request)    {        $data = [            'title' => $request->title,            'slug' => Str::slug($request->title, '-'),            'summary' => $request->summary,            'content' => $request->content_news,            'check' => $request->check,            'type' => $request->type,            'view' => $request->view ?? 100,            'sort' => $request->sort ?? 0,            'status' => $request->status,        ];        $validator = \Validator::make($data, [            'title' => 'required|max:255',            'content' => 'required',        ]);        if ($validator->fails()) {            return redirect()->back()                ->withErrors($validator)                ->withInput();        } else {            try {                \DB::beginTransaction();                $file = $request->image;                if($file) {                    $extension = $file->extension();                    $file_name = "vivatrip_" . rand(10000, mt_getrandmax()) . '_' . rand(10000, mt_getrandmax()) . '.' . $extension;                    $fileItem = [                        'name' => $file_name,                        'mime' => $file->getClientMimeType(),                        'size' => $file->getSize(),                        'path' => 'news'                    ];                    $file->move('images/uploads/news/', $fileItem['name']);                    $imagePath = public_path('images/uploads/news/' . $fileItem['name']);                    $thumbsPath = public_path('images/uploads/thumbs/' . $file_name);                    $image = Image::make($imagePath);                    $widthImg = $image->width();                    $heightImg = $image->height();                    $wResize = Contents::WIDTH_THUMBS;                    $hResize = ($wResize * $heightImg) / $widthImg;                    $image->resize($wResize, $hResize)->save($thumbsPath);                    $fileItem = FileItems::create($fileItem);                    $fileItem->content()->create($data);                } else {                    $data['file_item_id'] = null;                    Contents::create($data);                }                \DB::commit();                return redirect()->route('news.index');            } catch (Exception $e) {                dd($e);                \Log::error($e->getMessage());                \DB::rollback();                return redirect()->back();            }        }    }    /**     * Display the specified resource.     *     * @param  int $id     * @return \Illuminate\Http\Response     */    public function show($id)    {        //    }    /**     * Show the form for editing the specified resource.     *     * @param  int $id     * @return \Illuminate\Http\Response     */    public function edit($id)    {        $content = Contents::with('fileItem')->where('id', $id)->first();        return view('backend.news.edit', compact('content'));    }    /**     * Update the specified resource in storage.     *     * @param  \Illuminate\Http\Request $request     * @param  int $id     * @return \Illuminate\Http\Response     */    public function update(Request $request, $id)    {        $data = [            'title' => $request->title,            'slug' => Str::slug($request->title, '-'),            'summary' => $request->summary,            'content' => $request->content_news,            'check' => $request->check,            'type' => $request->type,            'view' => $request->view,            'sort' => $request->sort ?? 0,            'status' => $request->status,        ];        $file = $request->image;        $validator = \Validator::make($data, [            'title' => 'required|max:255',            'content' => 'required',        ]);        if ($validator->fails()) {            return redirect()->back()                ->withErrors($validator)                ->withInput();        } else {            try {                error_reporting(E_ALL);                ini_set('display_errors', 'On');                \DB::beginTransaction();                $news = Contents::find($id);                $news->title = $data['title'];                $news->slug = $data['slug'];                $news->summary = $data['summary'];                $news->content = $data['content'];                $news->type = $data['type'];                $news->check = $data['check'];                $news->sort = $data['sort'];                $news->status = $data['status'];                $news->view = $data['view'];                $news->save();                if ($file) {                    $filePath = public_path('images/uploads/' . @$news->fileItem->path . '/' . @$news->fileItem->name);                    if(File::exists($filePath)) {                        File::delete($filePath);                    }                    $extension = $file->extension();                    $file_name = "vivatrip_" . rand(10000, mt_getrandmax()) . '_' . rand(10000, mt_getrandmax()) . '.' . $extension;                    $fileData = [                        'name' => $file_name,                        'mime' => $file->getClientMimeType(),                        'size' => $file->getSize(),                        'path' => 'news'                    ];                    $file->move('images/uploads/news/', $fileData['name']);                    $imagePath = public_path('images/uploads/news/' . $file_name);                    $thumbsPath = public_path('images/uploads/thumbs/' . $file_name);                    $image = Image::make($imagePath);                    $widthImg = $image->width();                    $heightImg = $image->height();                    $wResize = Contents::WIDTH_THUMBS;                    $hResize = ($wResize * $heightImg) / $widthImg;                    $image->resize($wResize, $hResize)->save($thumbsPath);                    $file = FileItems::find($news->file_item_id);                    if(!$file) {                        $file = FileItems::create($fileData);                        $news->file_item_id = $file->id;                        $news->save();                    }                    $file->name = $fileData['name'];                    $file->mime = $fileData['mime'];                    $file->size = $fileData['size'];                    $file->path = $fileData['path'];                    $file->save();                }                \DB::commit();                return redirect()->route('news.index');            } catch (Exception $e) {                \Log::error($e->getMessage());                \DB::rollback();                return redirect()->back();            }        }    }    /**     * Remove the specified resource from storage.     *     * @param  int $id     * @return \Illuminate\Http\Response     */    public function destroy($id)    {        try {            \DB::beginTransaction();            $content = Contents::with('fileItem')->find($id);            $image = public_path('images/uploads/news/' . @$content->fileItem->name);            $imageThumbs = public_path('images/uploads/thumbs/' . @$content->fileItem->name);            if (File::exists($image)) {                File::delete($image);            }            if (File::exists($imageThumbs)) {                File::delete($imageThumbs);            }            $content->fileItem()->delete();            $content->delete();            \DB::commit();            return redirect()->back();        } catch (Exception $e) {            \Log::error($e->getMessage());            \DB::rollback();            return redirect()->back();        }    }}